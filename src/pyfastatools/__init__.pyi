from pathlib import Path
from typing import Iterator, List, NamedTuple

FilePath = str | Path

class Record:
    name: str
    desc: str
    seq: str
    def __init__(self, name: str, desc: str, seq: str) -> None: ...
    def empty(self) -> bool: ...
    def clear(self) -> None: ...

class Records(List[Record]): ...

class _Parser:
    def __init__(self, filename: str) -> None: ...
    def __iter__(self) -> "Parser": ...
    def __next__(self) -> Record: ...
    def has_next(self) -> bool: ...
    def all(self) -> Records: ...
    def take(self, n: int) -> Records: ...
    def refresh(self) -> None: ...
    def next(self) -> Record: ...

class Parser:
    def __init__(self, filename: FilePath) -> None: ...
    def __iter__(self) -> "Parser": ...
    def __next__(self) -> Record: ...
    def all(self) -> Records: ...
    def take(self, n: int) -> Records: ...
    def refresh(self) -> None: ...

class PyRecord(NamedTuple):
    name: str
    desc: str
    seq: str
    @classmethod
    def from_header(cls, header: str, sequence: str) -> "PyRecord": ...

class PyParser:
    def __init__(self, filename: FilePath) -> None: ...
    def _parse(self) -> Iterator[PyRecord]: ...
    def __iter__(self) -> Iterator[PyRecord]: ...
    def __next__(self) -> PyRecord: ...
    def all(self) -> List[PyRecord]: ...
    def take(self, n: int) -> List[PyRecord]: ...
